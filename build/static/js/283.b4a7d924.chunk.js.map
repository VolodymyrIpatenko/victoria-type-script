{"version":3,"file":"static/js/283.b4a7d924.chunk.js","mappings":"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","sources":["Mode.styled.tsx","utils/SubmitFunction.tsx","components/contacts/Contacts.styled.tsx","components/contacts/Contacts.tsx","components/modal/Modal.styled.tsx","components/modal/Backdrop.tsx","components/modal/Modal.tsx","hooks/customToggle.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ContentDark = styled.div`\n  background-color: #000;\n  color: #fee;\n`;\nexport const ContentLight = styled.div`\n  background-color: rgb(216, 216, 216);\n`;\n","import emailjs from 'emailjs-com';\n\nexport default function sendEmail(e: React.FormEvent<HTMLFormElement>) {\n  e.preventDefault();\n  const target = e.target as HTMLFormElement;\n  emailjs.sendForm('service_dl2asq4', 'template_vgiml6t', target, 'uNOI4ZKdEYiXSQt9Q').then(\n    result => {\n      setTimeout(() => {\n        window.location.reload();\n      }, 3500);\n    },\n    error => {\n      error.text;\n    },\n  );\n}\n","import styled from 'styled-components';\nimport { keyframes } from 'styled-components';\n\nexport const FormWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-height: 100vh;\n`;\n\nexport const MyForm = styled.form`\n  width: 400px;\n  height: 580px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border-radius: 7px;\n\n  background: linear-gradient(\n    90deg,\n    rgba(255, 52, 0, 1) 0%,\n    rgba(212, 128, 0, 1) 100%,\n    rgba(238, 130, 238, 1) 100%\n  );\n`;\n\nexport const ButtonSubmit = styled.button`\n  width: 150px;\n  padding: 10px;\n  border-radius: 5px;\n  font-weight: bold;\n  border: none;\n  color: white;\n  cursor: pointer;\n  background-color: #f6ad8d;\n  :hover {\n    background: linear-gradient(\n      90deg,\n      rgba(255, 255, 0, 1) 0%,\n      rgba(0, 118, 212, 1) 100%,\n      rgba(238, 130, 238, 1) 100%\n    );\n  }\n`;\n\nexport const MessageField = styled.input`\n  width: 300px;\n  height: 120px;\n  padding: 5px;\n  border-radius: 5px;\n  resize: none;\n  &::placeholder {\n    font-size: 18px;\n  }\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 10px 2px #7065ff;\n  }\n`;\n\nexport const Input = styled.input`\n  width: 300px;\n  height: 30px;\n  padding: 5px;\n  border-radius: 5px;\n  border: none;\n  &::placeholder {\n    font-size: 18px;\n  }\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 10px 2px #7065ff;\n  }\n`;\n\nexport const LabelText = styled.label`\n  margin: 15px;\n  font-size: 20px;\n  color: white;\n`;\n\nconst zoom = keyframes`\n from {\n  transform:scale(0);\n }\n to{\n  transform:scale(1);\n }\n`;\n\nexport const ContactsBackdrop = styled.div`\n  display: grid;\n  place-content: center;\n  min-height: 130vh;\n`;\n\nexport const ModalContacts = styled.div`\n  width: 400px;\n  height: 400px;\n  display: grid;\n  place-content: center;\n  position: relative;\n  z-index: 2;\n  animation: ${zoom} 2s;\n  padding: 1rem;\n  border-radius: 1rem;\n  background-color: #fc060e;\n  color: white;\n  font-size: 22px;\n`;\n","import React, { useState, useContext, ChangeEvent } from 'react';\nimport Modal from '../modal/Modal';\nimport validator from 'validator';\nimport sendEmail from '../../utils/SubmitFunction';\nimport { DarkModeContext } from '../../context/DarkModeContext';\nimport { useToggle } from '../../hooks/customToggle';\nimport {\n  MyForm,\n  ButtonSubmit,\n  MessageField,\n  Input,\n  LabelText,\n  FormWrapper,\n  ModalContacts,\n  ContactsBackdrop,\n} from './Contacts.styled';\nimport { ContentDark, ContentLight } from '../../Mode.styled';\n\nconst Contacts: React.FC = () => {\n  const { darkMode } = useContext(DarkModeContext);\n  const [data, setUserData] = useState({\n    name: '',\n    message: '',\n  });\n  const Theme = darkMode ? ContentDark : ContentLight;\n\n  const [email, setEmailError] = useState<string>('');\n  const [phone, setPhoneNumber] = useState<string>('');\n  const [isModalOpen, setModalOpen] = useToggle();\n  const { message, name } = data;\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserData(prevState => ({ ...prevState, [e.target.name]: e.target.value }));\n  };\n\n  const values =\n    name === '' || email === '' || phone === '' || message === '' || email !== 'Правильно';\n\n  const validateEmail = (e: ChangeEvent<HTMLInputElement>) => {\n    const email = e.target.value;\n\n    if (validator.isEmail(email)) {\n      setEmailError('Правильно');\n    } else {\n      setEmailError('Будь-ласка правильний email');\n    }\n  };\n\n  const validatePhoneNumber = (e: ChangeEvent<HTMLInputElement>) => {\n    const phone = e.currentTarget.value;\n    if (!Number(phone)) {\n      setPhoneNumber('');\n      alert('Введіть номер');\n    } else {\n      setPhoneNumber(e.currentTarget.value);\n    }\n  };\n\n  return (\n    <Theme>\n      <FormWrapper>\n        <MyForm onSubmit={sendEmail}>\n          <h1>Напишіть нам</h1>\n          <LabelText>\n            <p>Ім'я</p>\n            <Input type=\"text\" placeholder=\"Ваше ім'я\" onChange={handleChange} name=\"name\" />\n          </LabelText>\n          <LabelText>\n            <p>Пошта</p>\n            <Input type=\"email\" placeholder=\"Ваша пошта\" onChange={validateEmail} name=\"email\" />\n            <p\n              style={{\n                fontWeight: 'bold',\n                color: 'white',\n              }}\n            >\n              {email}\n            </p>\n          </LabelText>\n          <LabelText>\n            <p>Телефон</p>\n            <Input\n              type=\"tel\"\n              placeholder=\"Ваш номер телефону\"\n              name=\"phone\"\n              value={phone}\n              maxLength={12}\n              onChange={validatePhoneNumber}\n            />\n          </LabelText>\n          <LabelText>\n            <p>Повідомлення</p>\n            <MessageField\n              placeholder=\"Напишіть своє повідомлення\"\n              onChange={handleChange}\n              name=\"message\"\n            />\n          </LabelText>\n          <ButtonSubmit\n            disabled={values ? true : false}\n            type=\"submit\"\n            onClick={() => setModalOpen.toggle()}\n          >\n            {values ? 'Заповніть поля' : 'Відправити'}\n          </ButtonSubmit>\n          {isModalOpen ? (\n            <Modal>\n              <ContactsBackdrop>\n                <ModalContacts>\n                  <p>Дякуємо!В найближчий час ми з вами зв'яжемося.</p>\n                </ModalContacts>\n              </ContactsBackdrop>\n            </Modal>\n          ) : null}\n        </MyForm>\n      </FormWrapper>\n    </Theme>\n  );\n};\n\nexport default Contacts;\n","import styled from 'styled-components';\n\nexport const Backdrop = styled.div`\n  display: grid;\n  place-content: center;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  min-height: 100vh;\n  background: #000000e1;\n`;\n","import React, { ReactNode } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Backdrop } from './Modal.styled';\n\ninterface BackdropProps {\n  children: ReactNode;\n}\n\nconst BackdropComponent = ({ children }: BackdropProps) => {\n  return ReactDOM.createPortal(\n    <Backdrop>{children}</Backdrop>,\n    document.getElementById('portal') as Element,\n  );\n};\n\nexport default BackdropComponent;\n","import Backdrop from './Backdrop';\nimport './Modal.styled';\nimport { ReactNode } from 'react';\n\ninterface ModalProps {\n  children: ReactNode;\n}\n\nconst Modal = ({ children }: ModalProps) => {\n  return <Backdrop>{children}</Backdrop>;\n};\n\nexport default Modal;\n","import { useState } from 'react';\n\nexport const useToggle = (): [boolean, { toggle: () => void }] => {\n  const [value, setValue] = useState<boolean>(false);\n\n  const toggle = (): void => {\n    setValue(state => !state);\n  };\n\n  return [value, { toggle }];\n};\n"],"names":["ContentDark","styled","ContentLight","sendEmail","e","preventDefault","target","emailjs","then","result","setTimeout","window","location","reload","error","text","FormWrapper","MyForm","ButtonSubmit","MessageField","Input","LabelText","zoom","keyframes","ContactsBackdrop","ModalContacts","darkMode","useContext","DarkModeContext","useState","name","message","data","setUserData","Theme","email","setEmailError","phone","setPhoneNumber","useToggle","isModalOpen","setModalOpen","handleChange","prevState","value","values","onSubmit","type","placeholder","onChange","validator","style","fontWeight","color","maxLength","currentTarget","Number","alert","disabled","onClick","toggle","Modal","Backdrop","children","ReactDOM","document","getElementById","setValue","state"],"sourceRoot":""}